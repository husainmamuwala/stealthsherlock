// Malware.jsx
import React, { useState } from 'react';
import { Button, Container, makeStyles, Typography, CircularProgress } from '@material-ui/core';
import { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';
import axios from 'axios';
import { Pie } from 'react-chartjs-2';
import Report from './Report'; // Import the Report component

const useStyles = makeStyles((theme) => ({
    root: {
        marginTop: '10vh',
        height: '82.5vh',
        padding: theme.spacing(2),
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'flex-start',
        alignItems: 'flex-start',
    },
    responseContainer: {
        marginTop: theme.spacing(2),
        display: 'flex',
        flexDirection: 'row',
        alignItems: 'flex-start',
        justifyContent: 'space-between',
    },
    title: {
        fontSize: '1.5rem',
        fontWeight: 'bold',
        marginBottom: theme.spacing(2),
    },
    fileUpload: {
        marginBottom: theme.spacing(2),
    },
    uploadButton: {
        marginRight: theme.spacing(2),
    },
}));

const Malware = () => {
    const classes = useStyles();
    const [selectedFile, setSelectedFile] = useState(null);
    const [responseId, setResponseId] = useState('');
    const [responseData, setResponseData] = useState(null);
    const [loading, setLoading] = useState(false);

    const onFileChange = (event) => {
        setSelectedFile(event.target.files[0]);
    };

    const onFileUpload = async () => {
        const formData = new FormData();
        formData.append('file', selectedFile, selectedFile.name);
        setLoading(true); // Start loading
        try {
            const response = await axios.post("http://127.0.0.1:5000/malware/file", formData);
            console.log("Success", response);
            setResponseId(response.data.data); // Assuming response.data contains the ID
            fetchFileAnalysis(response.data.data); // Fetching analysis data using the ID
        } catch (error) {
            console.log("Error ", error);
            setLoading(false); // Stop loading on error
        }
    };


    const fetchFileAnalysis = async (id) => {
        try {
            const response = await axios.get(`http://127.0.0.1:5000/malware/file/${id}`);
            console.log("Analysis Data:", response.data);
            setResponseData(response.data);
        } catch (error) {
            console.log("Error fetching analysis data ", error);
            setLoading(false); // Stop loading on error
        }
    };

    const renderPieChart = () => {
        if (!responseData) {
            return null;
        }

        const { data } = responseData;
        const results = data.attributes.results || {};
        const countDetected = Object.values(results).filter(({ category }) => category === "malicious").length;
        const countUndetected = Object.values(results).filter(({ category }) => category === "undetected").length;


        const pieChartData = {
            labels: ['Detected', 'Undetected'],
            datasets: [
                {
                    data: [countDetected, countUndetected],
                    backgroundColor: ['#FF0000', '#00FF00'],
                    hoverBackgroundColor: ['#FF0000', '#00FF00'],
                },
            ],
        };

        return <Pie data={pieChartData} width={300} height={300} />;
    };

    const renderAnalysisData = () => {
        if (!responseData) {
            return null; // Return an empty string when responseData is not yet loaded
        }

        const { status, data } = responseData;
        const engineData = Object.entries(data.attributes.results)
            .map(([engine, { engine_name, category }]) => ({ engine_name, category }))
            .filter(({ category }) => category === "malicious" || category === "undetected" || category === "suspicious"); // Filter entries based on category

        // Render each attribute-value pair
        const countDetected = engineData.filter(({ category }) => category === "malicious").length;
        const countUndetected = engineData.filter(({ category }) => category === "undetected").length;

        let malwareContentStatus = "";
        let malwareContentColor = "";

        if (countDetected === 0) {
            malwareContentStatus = "File is Malware Free";
            malwareContentColor = "green";
        }
        else if (countDetected >= 10 && countDetected <= 20) {
            malwareContentStatus = "Malware Content is Low";
            malwareContentColor = "yellow";
        } else if (countDetected > 20 && countDetected <= 30) {
            malwareContentStatus = "Malware Content is Moderate";
            malwareContentColor = "orange";
        } else if (countDetected > 30 && countDetected <= 100) {
            malwareContentStatus = "Malware Content is High";
            malwareContentColor = "red";
        }

        return (
            <div className={classes.responseContainer}>
                <div>
                    <Typography variant="body1">Analysis Summary:</Typography>
                    <TableContainer component={Paper}>
                        <Table aria-label="analysis summary">
                            <TableBody>
                                <TableRow>
                                    <TableCell>Malicious:</TableCell>
                                    <TableCell align="left">{countDetected}</TableCell>
                                </TableRow>
                                <TableRow>
                                    <TableCell>Undetected:</TableCell>
                                    <TableCell align="left">{countUndetected}</TableCell>
                                </TableRow>
                            </TableBody>
                        </Table>
                    </TableContainer>
                </div>
                <div style={{ marginLeft: "20px" }}>
                    <Typography variant="body1">Analysis Details:</Typography>
                    <TableContainer component={Paper}>
                        <Table aria-label="analysis data">
                            <TableHead>
                                <TableRow>
                                    <TableCell>Engine Name</TableCell>
                                    <TableCell align="left">Category</TableCell>
                                </TableRow>
                            </TableHead>
                            <TableBody>
                                {engineData.map(({ engine_name, category }, index) => (
                                    <TableRow key={index}>
                                        <TableCell component="th" scope="row">
                                            {engine_name}
                                        </TableCell>
                                        <TableCell align="left">{category}</TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </TableContainer>

                </div>
                <div style={{ width: '300px', height: '300px' }}>
                    {renderPieChart()}
                </div>

                
            </div>
        );
    };

    return (
        <Container component="main" className={classes.root}>
            <Typography variant="h4" className={classes.title}>
                Malware Analysis
            </Typography>
            <Typography variant="h5">File Upload</Typography>
            <div className={classes.fileUpload}>
                <input type="file" onChange={onFileChange} />
                <Button
                    variant="contained"
                    color="primary"
                    onClick={onFileUpload}
                    className={classes.uploadButton}
                >
                    Upload
                </Button>
            </div>

            {loading && <CircularProgress />}
            {renderAnalysisData()}
        </Container>
    );
};

export default Malware;
